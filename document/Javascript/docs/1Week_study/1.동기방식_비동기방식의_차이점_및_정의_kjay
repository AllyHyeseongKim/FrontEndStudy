#1. 동기방식 비동기방식
 
자바스크립트는 Single Thread 방식이며, 모든 비동기 이벤트(Event Callback,  타이머(setTimeout, setInterval)는 같은 Thread 위에서 실행된다.

그러므로 기본적으로는 동기 방식으로 진행된다.   

####동기방식
동기 방식이란, 작업이 들어온 순서에 맞게 차근차근 하나씩 진행되는 것이다. 순서에 맞게 빨리빨리 진행되는 장점이 있지만, 여러 가지의 일을 동시에 처리할 수 없는 단점이 있다.


####비동기방식
동기방식의 단점을 보완하기 위해 탄생되었다고 보여지는 비동기방식. 
비동기 방식은 여러가지 일을 한꺼번에 처리할 수 있지만, 동기 방식보다 처리 속도가 조금 떨어질 수도 있다.   

<br>

동기 방식은 실행 함수가 끝난 뒤 되돌아오는 반환 함수, 즉 콜백 함수를 활용하여 일 처리 순서를 제어하는 것이다.   
a, b, c함수가 순서대로 있다고 가정하자.     
콜백 함수를 사용하면 a->b->c 혹은 a->c->b 순서처럼 개발자가 원하는 대로 시점을 제어할 수 있다.    
예를 들어 페이스 북에 댓글을 달 때, **페이지 새로고침을 하지 않는다든가, 대용량 페이지를 로드할 때 프로세스 진행 상황을 프로그래스바 혹은 모래시계 아이콘으로 보여준다든가 하는 방식**으로 말이다. 

>자바스크립트의 콜백함수란?   
 이벤트 함수가 실행된 후 결과가 되돌아오는 시점에서 실행되는 함수다.

이러한 장점이 있다 보니 필요에 따라 사용되는 콜백 함수들이 하나씩 늘게 되었다. 그런데 이 콜백 함수가 난무하게 되면 개발자가 코드를 알아보기 힘들뿐더러 디버깅, 유지보수 하기 매우 힘들어진다. 아래의 예시 사진은 callbackhell이라는 사이트에서 사용되는 한 이미지다. 콜백이 정말 많아서 한눈에 읽기 굉장히 불편하다.

![콜백 예시](../../images/1_img01_kjay.png)

그러한 점을 극복하기 위해 콜백 덩어리들을 하나의 패키지로 묶는 작업들이 생기게 되었고, 결국 자바스크립트 비동기 방식의 꽃이라 불리는 Promise가 탄생하게 되었다. 

#### Promise
 [Promise](https://www.npmjs.com/package/promise)는 콜백 함수들로 이루어진 것이다.    
 원래 함수의 반환 값에 따라 경우의 수로 제어할 수 있다. 실행에 성공했을 경우 다음 함수로 진행한다던가,  실패했을 경우 에러 메세지를 얼럿 창으로 띄워준다든가 말이다.   이렇듯 Promise는 함수의 실행 시점을 기존 콜백 방식보다 간단하게 제어할 수 있는 자바스크립트 패키지다. 개발자가 원하는 함수의 실행결과에 따라 성공일 때 다음 작업을 진행할 수 있고, 실패일 때 작업을 멈추고 처음으로 되돌아가거나 오류 메세지를 사용자에게 띄워 줄 수 있다.
```java
var Promise = require('promise');
 
var promise = new Promise(function (resolve, reject) {
  get('http://www.google.com', function (err, res) {
    if (err) reject(err);
    else resolve(res);
  });
});

```

>사실 콜백 함수는 자바스크립에서 기본적으로 제공해 주는 함수가 아니라 웹 브라우저에서 지원해주는 함수라는 것이었다. 그도 그럴것이 사실 자바스크립트는 동기 방식의 언어이기 때문에 비동기 방식의 기본 문법은 없어야 함이 맞는 것 같다. 아무튼 콜백 함수를 더 작은 단위로 쪼개어보면 setTimeOut이나 setInterval과 같은 시점을 강제로 제어하는 것들로 이루어져 있다고 한다. 

결론적으로 큰 단위에서 쪼개어보면 Promise -> Callback() -> setTimeOut()의 단위로 나뉘어진다. 동기식으로 구성된 언어를 강제로 비동기식으로 접근하려다 보니 코드가 복잡해진 것 같다.


-------------------

다른 느낌의 동기 비동기의 정의 

####동기, 비동기(방식), blocking, non-blocking(함수)
* 동기 : 순서있게 일(I/O등)을 한다.
* 비동기 : 신호를 보내고, 받는다.(무순서)
* 블록킹 : 리턴값에 신뢰성이 있다(대신에 기다림)
* 넌블록킹 : 리턴값은 대개 무조건 false다.(바로 리턴하는 대신, 신뢰성이 없음)

비동기에서는 주로 non-blocking함수를 쓰고, 동기에서는 blocking함수를 주로 쓰지
만, 엄밀히 blocking, non-blocking은 함수에 대한 설명일 뿐이다. 통신하는 방식
이 아니죠.

문제는 MS에서 AsyncSocket이라고 지원해 주는 것이 Unix에서는 non-blocking방식으
로 되어있습니다.(sync, async라는 것이 사실 이름 붙이기 나름이죠)
사실 진정한 async는 blocking함수가 있으면, 안됩니다.(recv함수도 blocking함수죠)

**대표적 통신 방식**   
1. sync   
2. non-blocking(Windows쪽에서 지원해 주는 async).   
3. aync(recv가 없는 방식, 다시 여러가지로세분됨).

아마, 계속 보시다보면, 대충 뭐가 sync고 뭐가 async인지 나름대로 감을 잡으실 수 
있으실 겁니다^^

 
*실례*   
>1. sync : send명령어로 메세지를 보내고, 다 보냈는지 확인한 수에 return한다.   
2. async : WriteFile로 "OS야 시간나면, 이거 보내라~"라고 통지만 해준다.
(당연히 언제 보낼지, 아님 바빠서 안보낼지 알 수가 없다.)     
1-1. 보낸다-확인, 보낸다-확인(한번에 1개씩 밖에 못 보내겠죠?)   
2-1. 보낸다-보낸다-보낸다 확인-확인-확인.(마구마구 중첩시킬수 있습니다^^)   

사실 sync, async는 통신에서 뿐만이 아니라 엔간한 I/O에는 다 있는 방식입니다.
당연히 님께서도 이미 동기 비동기 I/O를 수도없이 겪으셨고 이미 거의 완벽히 이해하
고 계십니다....프린터 써보셨죠??^^

*더 쉬운 예(프린터를 예로 들어서, 문서 10개를 print시킬때)*
	
1. sync : 문서를 작성하고 print시킨다. 다 프린트 되서 나올때까지 기다려서 확인.
          그 다음 문서를 print시키고, 다 나올때까지 확인.(당연 절라 느림)
          (거기다 사람(application)이 계속 기달리고 있어야 함...시간 아깝죠?^^)
2. async : 문서를 print시키라고 마구 시킨다.(프린터야 죽어나든 말든..)
           글구 사람(application)은 코딩작업을 마무리 하던가, 데브피아에 답변을
           올리던가...일을 하다가 printer가 일이 끝나면, 삐~~(신호음)을 울려주고
           그때서야 프린트가 잘 됐나 한번 봐준다^^
          (사람(application)을 부릴땐 이렇게 시켜야 효율적으로 일하겠죠?^^)
          (실제로 쓰이고 있는 방식입니다.)
3. non-blocking방식 : 프린트 시키고 딴짓하다가 프린트가 나오기 시작하면,
          다 끝날때까지 기다림(sync보단 효율적이고, async보단 더 느리고)
          (recv함수를 쓰는 동안은 기다리니깐요)

동기는 프로그래밍하기가 좋고, 비동기는 좀 더 까다로운 대신 기능이 좋죠^^   

*덧.* async가 네트워크 속도가 빠른 건 아닙니다(확인하고 보내는 시간이 없으니 조금 더 빠르긴 하지만, 프린트를 1000장을 시킬 때, 완료될때까지 걸리는 시간은 그렇게 
차이가 안나죠. 문제는 사람(application)이 하루종일 기달리고 있느냐, 하루종일 딴
일하고 마지막에 확인만 해주느냐의 차이인 것이죠.^^



참고사이트[http://apple77y.tistory.com/11](http://apple77y.tistory.com/11)
[http://kineo2k.tistory.com/29](http://kineo2k.tistory.com/29) 
[http://mohwaproject.tistory.com/170](http://mohwaproject.tistory.com/170)